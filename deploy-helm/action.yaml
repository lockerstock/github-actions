name: Deploy Helm Chart
description: Prepares and installs a Helm chart to determined Namespace

inputs:
  token:
    description: GITHUB_TOKEN to access the GitHub API if the repository is private
    required: false

  chart_path:
    description: 'Path to Helm chart'
    required: false
    default: deployments/helm/${{ github.event.repository.name }}

  image_tag:
    description: 'Tag of Docker image'
    required: false
    default: latest

  namespace:
    description: 'Namespace to deploy Helm chart. If not provided, will be calculated from action trigger'
    required: false

  wait:
    description: 'Flag to have Helm deploy wait for resources to finish deploying'
    required: false
    default: 'false'

  wait_for_jobs:
    description: 'Flag to have Helm deploy wait for Jobs to finish running'
    required: false
    default: 'false'

  timeout:
    description: Sets time to wait for Kubernetes operations
    required: false
    default: '5m0s'

outputs:
  namespace:
    description: 'Name of Namespace that was deployed to.'
    value: ${{ steps.namespace.outputs.namespace }}

  chart_version:
    description: 'Version of the Helm chart that was deployed'
    value: ${{ steps.version.outputs.variable }}

  hostname:
    description: 'Hostname provided to deployed Helm chart'
    value: ${{ steps.hostname.outputs.value }}

  environment:
    description: Environment used to deploy Helm chart
    value: ${{ steps.version.outputs.environment }}

runs:
  using: composite
  steps:
    - name: Create Namespace
      id: namespace
      uses: lockerstock/kubernetes-actions/create-feature-namespace@main
      with:
        namespace: ${{ inputs.namespace }}
        token: ${{ inputs.token }}

    - name: Get Repository Name
      id: repository
      uses: lockerstock/kubernetes-actions/clean-variable@main
      with:
        variable: ${{ github.repository }}

    - name: Short Sha
      id: short
      uses: lockerstock/kubernetes-actions/get-short-sha@main

    - name: Version
      id: version
      uses: lockerstock/kubernetes-actions/determine-environment@main
      with:
        token: ${{ inputs.token }}
        production_variable: ${{ github.ref_name }}
        staging_variable: 'v0.0.0-${{ steps.short.outputs.short_sha }}'
        development_variable: 'v0.0.0-${{ steps.short.outputs.short_sha }}'

    - name: Hostname
      id: hostname
      uses: lockerstock/kubernetes-actions/get-configmap-value@main
      with:
        namespace: default
        config_map: hostnames
        variable: ${{ steps.version.outputs.environment }}
      env:
        NAMESPACE: ${{ steps.namespace.outputs.namespace }}

    - name: Update versions
      run: yq --inplace '.version = "${{ steps.version.outputs.variable }}" | .appVersion = "${{ steps.version.outputs.variable }}"' Chart.yaml
      working-directory: ${{ inputs.chart_path }}
      shell: bash

    - name: Update values
      run: |
        yq --inplace '.image.tag = "${{ inputs.image_tag }}", .environment = "${{ steps.version.outputs.environment }}"' values.yaml
        envsubst < values.yaml | sponge values.yaml
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      env:
        HOSTNAME: ${{ steps.hostname.outputs.value }}

    - name: Helm Deploy
      run: |
        helm upgrade --install ${{ steps.repository.outputs.variable }} ${{ inputs.chart_path }} \
          --namespace ${{ steps.namespace.outputs.namespace }} --create-namespace \
          --wait=${{ inputs.wait }} \
          --wait-for-jobs=${{ inputs.wait_for_jobs }} \
          --timeout=${{ inputs.timeout }}
      shell: bash

    ##### Prepare and attach Helm charts to release #####

    - name: Build Template
      if: github.ref_type == 'tag'
      run: helm template --namespace ${{ steps.namespace.outputs.namespace }} ${{ steps.repository.outputs.variable }} ${{ inputs.chart_path }} > ${{ steps.repository.outputs.variable }}.yaml
      shell: bash

    - name: Build Package
      if: github.ref_type == 'tag'
      run: helm package ${{ inputs.chart_path }}
      shell: bash

    - name: Add to release
      if: github.ref_type == 'tag'
      run: gh release upload ${{ github.ref_name }} ${{ steps.repository.outputs.variable }}.yaml "${CHART_PATH##*/}-${{ steps.version.outputs.variable }}.tgz"
      env:
        GH_TOKEN: ${{ inputs.token }}
        CHART_PATH: ${{ inputs.chart_path }}
      shell: bash
