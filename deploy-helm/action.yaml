name: Deploy Helm Chart
description: Prepares and installs a Helm chart to determined Namespace

inputs:
  token:
    description: GITHUB_TOKEN to access the GitHub API if the repository is private
    required: false

  actor:
    description: GitHub Access User to use alongside above token
    required: false
    default: ${{ github.actor }}

  chart_path:
    description: 'Path to Helm chart'
    required: false
    default: deployments/helm/${{ github.event.repository.name }}

  image_tag:
    description: 'Tag of Docker image'
    required: false
    default: latest

  namespace:
    description: 'Namespace to deploy Helm chart. If not provided, will be calculated from action trigger'
    required: false

  wait:
    description: 'Flag to have Helm deploy wait for resources to finish deploying'
    required: false
    default: 'false'

  wait_for_jobs:
    description: 'Flag to have Helm deploy wait for Jobs to finish running'
    required: false
    default: 'false'

  timeout:
    description: Sets time to wait for Kubernetes operations
    required: false
    default: '5m0s'

outputs:
  namespace:
    description: 'Name of Namespace that was deployed to.'
    value: ${{ steps.namespace.outputs.namespace }}

  chart_version:
    description: 'Version of the Helm chart that was deployed'
    value: ${{ steps.version.outputs.variable }}

  hostname:
    description: 'Hostname provided to deployed Helm chart'
    value: ${{ steps.hostname.outputs.value }}

  environment:
    description: Environment used to deploy Helm chart
    value: ${{ steps.version.outputs.environment }}

runs:
  using: composite
  steps:
    - name: Create Namespace
      id: namespace
      uses: lockerstock/github-actions/create-feature-namespace@main
      with:
        namespace: ${{ inputs.namespace }}
        token: ${{ inputs.token }}

    - name: Get Repository Name
      id: repository
      uses: lockerstock/github-actions/clean-variable@main
      with:
        variable: ${{ github.repository }}

    - name: Short Sha
      id: short
      uses: lockerstock/github-actions/get-short-sha@main

    - name: Get Chart Information
      id: chart
      run: ${{ github.action_path }}/scripts/chart-info.sh "${{ inputs.chart_path }}"
      shell: bash

    - name: Get Source Version
      if: steps.chart.outputs.has_oci == 'true'
      id: package
      uses: lockerstock/github-actions/get-package-version@main
      with:
        token: ${{ inputs.token }}
        package_owner: ${{ steps.chart.outputs.oci_source_owner }}
        package_name: ${{ steps.chart.outputs.oci_source_package }}
        package_type: container
        package_version_constraint: ${{ steps.chart.outputs.version_constraint }}
        timestamp_constraint: ${{ github.ref_type == 'tag' && github.event.head_commit.timestamp || '' }}

    - name: Version
      id: version
      uses: lockerstock/github-actions/determine-environment@main
      with:
        token: ${{ inputs.token }}
        production_variable: ${{ github.ref_name }}
        staging_variable: 'v0.0.0-${{ steps.short.outputs.short_sha }}'
        development_variable: 'v0.0.0-${{ steps.short.outputs.short_sha }}'

    - name: Hostname
      id: hostname
      uses: lockerstock/github-actions/get-configmap-value@main
      with:
        namespace: default
        config_map: hostnames
        variable: ${{ steps.version.outputs.environment }}
      env:
        NAMESPACE: ${{ steps.namespace.outputs.namespace }}

    - name: Update versions
      run: yq --inplace '.version = "${{ steps.package.outputs.version || steps.version.outputs.variable }}" | .appVersion = "${{ steps.version.outputs.variable }}"' Chart.yaml
      working-directory: ${{ inputs.chart_path }}
      shell: bash

    - name: Update values
      run: |
        yq --inplace '.image.tag = "${{ inputs.image_tag }}", .environment = "${{ steps.version.outputs.environment }}"' values.yaml
        envsubst < values.yaml | sponge values.yaml
      working-directory: ${{ inputs.chart_path }}
      shell: bash
      env:
        HOSTNAME: ${{ steps.hostname.outputs.value }}

    ##### Deploy Helm Chart from acting repository #####

    - name: Helm Deploy
      if: steps.chart.outputs.has_oci != 'true'
      run: |
        helm upgrade --install ${{ steps.repository.outputs.variable }} ${{ inputs.chart_path }} \
          --namespace ${{ steps.namespace.outputs.namespace }} --create-namespace \
          --wait=${{ inputs.wait }} \
          --wait-for-jobs=${{ inputs.wait_for_jobs }} \
          --timeout=${{ inputs.timeout }}
      shell: bash

    ##### Deploy Helm Chart from OCI Registry #####

    - name: Login to Helm Registry
      if: steps.chart.outputs.has_oci == 'true'
      run: echo ${{ inputs.token }} | helm registry login ghcr.io --username ${{ inputs.actor }} --password-stdin
      shell: bash

    - name: Helm Deploy from Registry
      if: steps.chart.outputs.has_oci == 'true'
      run: |
        helm upgrade --install ${{ steps.repository.outputs.variable }} oci://${{ steps.chart.outputs.oci }} \
          --version ${{ steps.package.outputs.version }} \
          -f ${{ inputs.chart_path }}/values.yaml \
          --namespace ${{ steps.namespace.outputs.namespace }} --create-namespace \
          --wait=${{ inputs.wait }} \
          --wait-for-jobs=${{ inputs.wait_for_jobs }} \
          --timeout=${{ inputs.timeout }}
      shell: bash

    ##### Deploy Helm Chart from remote repository #####

    - name: Install Helm Repository
      if: steps.chart.outputs.has_repo == 'true'
      run: helm repo add ${{ github.repository_owner }} ${{ steps.chart.outputs.repository }}
      shell: bash

    - name: Helm Deploy from Repository
      if: steps.chart.outputs.has_repo == 'true'
      run: |
        helm upgrade --install ${{ steps.repository.outputs.variable }} ${{ github.repository_owner }}/${{ steps.chart.outputs.chart }} \
          --version "${{ steps.chart.outputs.version_constraint }}" \
          -f ${{ inputs.chart_path }}/values.yaml \
          --namespace ${{ steps.namespace.outputs.namespace }} --create-namespace \
          --wait=${{ inputs.wait }} \
          --wait-for-jobs=${{ inputs.wait_for_jobs }} \
          --timeout=${{ inputs.timeout }}
      shell: bash


    ##### Prepare and attach Helm charts to release #####

    - name: Build Template From Repository
      if: github.ref_type == 'tag' && steps.chart.outputs.has_oci != 'true'
      run: |
        helm template ${{ steps.repository.outputs.variable }} ${{ inputs.chart_path }} \
          > ${{ steps.repository.outputs.variable }}-${{ steps.version.outputs.variable }}.yaml
      shell: bash

    - name: Build Template From Remote OCI Registry
      if: github.ref_type == 'tag' && steps.chart.outputs.has_oci == 'true'
      run: |
        helm template ${{ steps.repository.outputs.variable }} oci://${{ steps.chart.outputs.oci }} \
          --version ${{ steps.package.outputs.version }} \
          -f ${{ inputs.chart_path }}/values.yaml \
          > ${{ steps.repository.outputs.variable }}-${{ steps.version.outputs.variable }}.yaml
      shell: bash

    - name: Build Template From Remote Repository
      if: github.ref_type == 'tag' && steps.chart.outputs.has_repo == 'true'
      run: |
        helm template ${{ steps.repository.outputs.variable }} ${{ github.repository_owner }}/${{ steps.chart.outputs.chart }} \
          --version "${{ steps.chart.outputs.version_constraint }}" \
          -f ${{ inputs.chart_path }}/values.yaml \
          > ${{ steps.repository.outputs.variable }}-${{ steps.version.outputs.variable }}.yaml
      shell: bash

    - name: Build Template From Repository
      if: github.ref_type == 'tag' && steps.chart.outputs.has_oci != 'true'
      run: helm template ${{ steps.repository.outputs.variable }} ${{ inputs.chart_path }} > ${{ steps.repository.outputs.variable }}-${{ steps.version.outputs.variable }}.yaml
      shell: bash

    - name: Add template to release
      if: github.ref_type == 'tag'
      run: gh release upload ${{ github.ref_name }} ${{ steps.repository.outputs.variable }}-${{ steps.version.outputs.variable }}.yaml --clobber
      env:
        GH_TOKEN: ${{ inputs.token }}
      shell: bash

    - name: Add prepared values.yaml to release
      if: github.ref_type == 'tag' && (steps.chart.outputs.has_oci == 'true' || steps.chart.outputs.has_repo == 'true')
      run: gh release upload ${{ github.ref_name }} values.yaml --clobber
      env:
        GH_TOKEN: ${{ inputs.token }}
      working-directory: ${{ inputs.chart_path }}
      shell: bash
